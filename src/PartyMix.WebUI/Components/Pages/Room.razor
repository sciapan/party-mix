@page "/Room/{roomId}"
@using System.Globalization
@using PartyMix.Contracts
@inject IHttpClientFactory HttpClientFactory;
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>Room</PageTitle>

@if (_room == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="container mt-4">
        <div class="row">
            <div class="col">
                <h1 class="mb-4">@_room.Name</h1>
                <div class="row align-items-center">
                    <div class="col-auto">
                        <label for="next-song" class="col-sm-2 col-form-label">Next song:</label>
                    </div>
                    <div class="col-auto">
                        <input @bind="_nextSong" type="text" class="form-control" id="next-song" name="next-song"/>
                    </div>
                    <div class="col-auto">
                        <button @onclick="CreatePlaylistEntryAsync" type="button">Add</button>
                    </div>
                </div>
                
                @if (_playlist.Count == 0)
                {
                    <div class="alert alert-info">
                        No songs in the playlist.
                    </div>
                }
                else
                {
                    <div class="card">
                        <div class="card-body">
                            <table class="table">
                                <thead>
                                <tr>
                                    <th>#</th>
                                    <th>Title</th>
                                    <th>Artist</th>
                                </tr>
                                </thead>
                                <tbody>
                                @for (int i = 0; i < _playlist.Count; i++)
                                {
                                    var index = i;
                                    <tr class="@(currentSongIndex == index ? "table-primary" : "")">
                                        <td>@(index + 1)</td>
                                        <td>@_playlist[index].Song</td>
                                        <td>@_playlist[index].Artist</td>
                                    </tr>
                                }
                                </tbody>
                            </table>

                            <div class="card mt-3">
                                <div class="card-body">
                                    <div class="row align-items-center">
                                        <div class="col">
                                            @if (currentSongIndex >= 0 && currentSongIndex < _playlist.Count)
                                            {
                                                <p class="h5 mb-0">Now Playing: @_playlist[currentSongIndex].Song - @_playlist[currentSongIndex].Artist</p>
                                            }
                                        </div>
                                        <div class="progress mt-4 mb-4" style="height: 10px;">
                                            <div class="progress-bar" role="progressbar"
                                                 style="width: @progressPercentageFormatted%"
                                                 aria-valuenow="@progressPercentageFormatted"
                                                 aria-valuemin="0"
                                                 aria-valuemax="100">
                                            </div>
                                        </div>
                                        <div class="col-auto">
                                            <div class="btn-group">
                                                <button class="btn btn-outline-primary" @onclick="PlayPreviousAsync" disabled="@(currentSongIndex <= 0)">
                                                    Previous
                                                </button>
                                                <button class="btn btn-primary" @onclick="TogglePlayAsync">
                                                    @(isPlaying ? "Pause" : "Play")
                                                </button>
                                                <button class="btn btn-outline-primary" @onclick="PlayNextAsync" disabled="@(currentSongIndex >= _playlist.Count - 1)">
                                                    Next
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string RoomId { get; set; }

    private RoomVm? _room;
    private List<PlaylistEntryVm> _playlist;
    
    private int currentSongIndex = -1;
    private bool isPlaying = false;
    private double progressPercentage = 0;
    private string progressPercentageFormatted = "0";
    private DotNetObjectReference<Room> objRef;

    private string? _nextSong = null;
    
    protected override async Task OnInitializedAsync()
    {
        using var client = HttpClientFactory.CreateClient("apiClient");
        var response = await client.GetAsync($"/rooms/{RoomId}");
        if (response.IsSuccessStatusCode)
        {
            _room = await response.Content.ReadFromJsonAsync<RoomVm>();
            _playlist = _room!.Playlist!.ToList();
        }
        else
        {
            // TODO add handling            
        }
        
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("audioPlayer.initialize", objRef);
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task CreatePlaylistEntryAsync()
    {
        using var client = HttpClientFactory.CreateClient("apiClient");
        var response = await client.PostAsJsonAsync("/playlistEntries", new
        {
            RoomId = RoomId,
            Search = _nextSong
        });

        if (response.IsSuccessStatusCode)
        {
            // clean-up input
            _nextSong = null;

            var playlistEntry = await response.Content.ReadFromJsonAsync<PlaylistEntryVm>();
            _playlist.Add(playlistEntry!);
        }
        else
        {
            // TODO handle failure
        }
    }

    private async Task TogglePlayAsync()
    {
        if (currentSongIndex == -1 && _playlist.Count != 0)
        {
            currentSongIndex = 0;
            await PlayCurrentSongAsync();
        }
        else
        {
            isPlaying = !isPlaying;
            if (isPlaying)
            {
                await JSRuntime.InvokeVoidAsync("audioPlayer.play");                                
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("audioPlayer.pause");
            }
        }
    }
    
    private async Task PlayNextAsync()
    {
        if (currentSongIndex < _playlist.Count - 1)
        {
            currentSongIndex++;
            await PlayCurrentSongAsync();
        }
    }

    private async Task PlayPreviousAsync()
    {
        if (currentSongIndex > 0)
        {
            currentSongIndex--;
            await PlayCurrentSongAsync();
        }
    }
    
    private async Task PlayCurrentSongAsync()
    {
        if (currentSongIndex >= 0 && currentSongIndex < _playlist.Count)
        {
            isPlaying = true;

            var currentSong = _playlist[currentSongIndex];
            
            var client = HttpClientFactory.CreateClient("apiClient");
            var fullUrl = $"{client.BaseAddress}playlistEntries/{currentSong.Id}";
            
            await JSRuntime.InvokeVoidAsync("audioPlayer.loadAndPlay", fullUrl);
        }
    }
    
    [JSInvokable]
    public void OnPlaybackProgress(double? percentage)
    {
        progressPercentage = percentage ?? 0;
        progressPercentageFormatted = progressPercentage.ToString("F", CultureInfo.InvariantCulture);
        
        StateHasChanged();
    }

    [JSInvokable]
    public async Task OnSongEnded()
    {
        if (currentSongIndex < _playlist.Count - 1)
        {
            await PlayNextAsync();
        }
        else
        {
            isPlaying = false;
            currentSongIndex = -1;
            progressPercentage = 0;
            StateHasChanged();
        }
    }
    
    public void Dispose()
    {
        objRef?.Dispose();
    }
}