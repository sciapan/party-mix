@page "/CreateRoom"

@using PartyMix.Application.Rooms.Models
@inject IHttpClientFactory HttpClientFactory;
@rendermode InteractiveServer

<PageTitle>CreateRoom</PageTitle>

<div class="container mt-4">
    <div class="text-center mb-4">
        To create a new room, set the title and password:
    </div>
    <div class="row mb-3">
        <label for="name" class="col-sm-2 col-form-label">Room name:</label>
        <div class="col-sm-10">
            <input @bind="_name" type="text" class="form-control" id="name" name="name"/>
        </div>
    </div>
    <div class="row mb-3">
        <label for="password" class="col-sm-2 col-form-label">Password:</label>
        <div class="col-sm-10">
            <input @bind="_password" type="password" class="form-control" id="password" name="password"/>
        </div>
    </div>
    <div class="row mb-3">
        <button @onclick="CreateRoomAsync" type="button">Create</button>
    </div>
    @if (_roomLink != string.Empty)
    {
        <div class="row mb-3">
            <a id="room-link" name="room-link" href="@_roomLink">@_roomLink</a>
        </div>
    }
</div>

@code {
    private string _name = string.Empty;
    private string _password = string.Empty;
    private string _roomLink = string.Empty;

    private async Task CreateRoomAsync()
    {
        using var client = HttpClientFactory.CreateClient("apiClient");
        var response = await client.PostAsJsonAsync("/rooms", new { Name = _name, Password = _password });
        if (response.IsSuccessStatusCode)
        {
            var roomVm = await response.Content.ReadFromJsonAsync<RoomVm>();
            _roomLink = roomVm!.Link;
        }
    }

}